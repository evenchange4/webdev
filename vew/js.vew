:title 學 Javascript

:description 不囉唆學 Javascript reveal.js 製作的 HTML / CSS / JS 投影片。
:author MrOrz
:email johnsonliang7@gmail.com

:stylesheet_link_tag css/main.css, css/styles.css, css/sample.css, css/jquery-ui.css
:stylesheet_link_tag css/ruler.css, lib/zenburn.css

:javascript_include_tag js/jquery.min.js
:javascript_include_tag https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js
:javascript_include_tag js/reveal.js, lib/highlight.js, js/sample.js, js/init-js.js, js/index.js, js/ruler.js

!SLIDE
  Javascript
  ===
  {:.nav}
  * [html.html](HTML)
  * [css.html](CSS)
  * [advancedjs.html](Advanced JS)

!SLIDE
  長這樣
  -----
  {:.demo.small}
  ~~~
    var form = document.getElementById('submitform');
    form.addEventListener('submit', function(e){
      var checkbox = document.getElementById('tos');
      if(!checkbox.checked){
        alert('請詳閱出師表。');
        e.preventDefault();
      }
    });
    form.addEventListener('focus', function(){
      console.log('focus');
    })
  ~~~

    * Javascript 操作 DOM (HTML 的 API) 的範例。
    * 變數需要事先定義，但不指定型別。

{:.chapter}
!SLIDE
  牛刀小試
  --------

!STACK
  !SLIDE
    怎麼寫
    ------
    `ctrl + shift + j` 打開 Javascript Console。

    ![images/js/console.png](Javascript console)。

    輸入一行 Javascript (黑色)，輸出一行回傳值 （藍色）

    試試 `3+2`, `Math.sin(Math.PI)`, `0.1 + 0.2`

  !SLIDE
    變數與型別
    ----------
    * Javascript 為弱型別（weak typing）語言
    * 用 `var` 敘述定義變數
    * 變數可以是任何型態的東西
    * 但不代表 Javascript 沒有型態；亂弄會出錯。
    * 大小寫敏感

    ```
      var a = "str", A; // a != A
      a = 3; // 換型態
    ```

  !SLIDE
    運算子
    ------
    * 負數 : `-` (如 `-35`)
    * 算數 : `*` &nbsp; `/` &nbsp; `%` &nbsp; `+` &nbsp; `-` 
    * 比大小 : `===`  &nbsp; `!==`  &nbsp; `<`  &nbsp; `>`  &nbsp; `<=` &nbsp;  `>=`
    * 邏輯運算 : `&&` &nbsp;  `||` &nbsp;  `!`
    * 三元運算子 : `? :`
    * 指派 : `=` &nbsp; `+=` &nbsp; `-=` &nbsp; `*=` &nbsp; `/=` &nbsp; `%=`


  !SLIDE
    文字與數字
    ------
    數字和字串相加，自動會變成字串。
    `+` 的左右兩邊都是數字時，才會行加法；否則都是字串串接
    ![images/js/string-number.png](字串加數字等於字串)

    ---

    `parseInt(str, base)`, `parseFloat(str, base)` : 文字轉數字
    ![images/js/parseInt.png](parseInt)

  !SLIDE
    輸出文字
    --------
    `console.log(文字)` → Javascript Console。
    `document.write(文字)` → 直接到 HTML 裡。

    一般<strong>請不要</strong>使用 `document.write`。
    `document.write` 只出現在教學裡。

  !SLIDE
    JavaSCRIPT
    ------
    寫在一個檔案裡面，才有「腳本」的 FU

    {:.fragment}
    指令一行一行寫，沒有道理寫不完。

    <div class="fragment">
      用 `<script type="text/javascript"></script>` 包住，放在 HTML 裡

    {:.html}
      ~~~
        &lt;script type="text/javascript"&gt;
          document.write("script 標籤裡好溫暖喔 (羞)");
        &lt;/script&gt;
      ~~~
    </div>

  !SLIDE
    Javascript file
    ---------------

    * 另外寫成一個 *.js 檔
    *  `<script type="text/javascript" src="路徑與檔名"></script>`

    {:.html}
    ~~~
        &lt;script type="text/javascript" src="sample/included.js"&gt;&lt;/script&gt;
        <p>一片空白。</p>
    ~~~

    {:.fragment}
    `<script>` 寫在 `<head>` 或 `<body>` 裡都可以。瀏覽器一讀到就會立即執行（Load-and-go）。

  !SLIDE
    jsfiddle
    --------
    用 inspector 來看一下 [http://jsfiddle.net](jsfiddle.net)。

!ENDSTACK

{:.chapter}
!SLIDE
  JS 和 C 很像
  -----

!STACK
  !SLIDE
    `if` 條件
    --

    `if`-`else if`-`else`-`endif`

    ~~~
      var year = 2012;
      if(year % 400){
        document.write('閏年');
      }else if(year % 100){
        document.write('不是閏年');
      }else if(year % 4){
        document.write('閏年');
      }else{
        document.write('不是閏年');
      }
    ~~~

  !SLIDE
    迴圈
    ---
    `for`, `while`, `break`

    迴圈前可以加上 label 如下：

    {:[data-lang=javascript]}
    ```
      outerLoop: for(;;){
        ……
          if(...){
            break outerLoop;
          }
        ……
      }
    ```


  !SLIDE
    switch case
    -----------
    記得 `break;`

    ~~~
      var name = "董允", comment;
      switch(name){
        case '郭攸之':
        case '費依':
        case '董允':
          comment = '此皆良實，志慮忠純';
          break;
        case '向寵':
          comment = '試用之於昔日，先帝稱之曰「能」';
          break;
        default:
          comment = '親賢臣，遠小人，此先漢所以興隆也';
      }
      document.write(comment);
    ~~~

  !SLIDE
    註解
    ---
    
    `/* 多行 */` 與 `// 單行`

!ENDSTACK

{:.chapter}
!SLIDE
  JS 又和 C 不一樣
  ---

!STACK
  !SLIDE

    {:#reserved}
    保留字
    ---
      不能當作變數名稱、屬性名稱的字。
        abstract boolean `break` byte `case` `catch` char class const `continue`
        debugger `default` `delete` `do` double `else` enum export extends
        `false` final finally float `for` `function`
        goto `if` implements import `in` `instanceof` int 
        interface long native `new` `null` package private protected public `return`
        short static super `switch` synchronized
        `this` `throw` throws transient `true` `try` `typeof`
        `var` volatile `void` `while` `with`

  !SLIDE
    特殊值
    ---
      `NaN`: Not a number，不是數字。
      ~~~
        document.write(
          26 + parseInt('二十四個比利', 10) );
      ~~~

      `undefined`: 未定義。變數的預設值、function 預設的回傳值。
      ~~~
        var hey, noop = function(){};
        document.write(hey + '<br>');
        document.write(noop());
      ~~~

      `null`: 什麼都不是。

  !SLIDE
    Strings
    ---
      * 單引號 or 雙引號 均可
      * `\'`  `\"` `\\`  `\n`  `\t`
      * length 屬性：長度
      * 無法修改字串 (immutable)。
      * UCS-2 編碼 （UTF-16 的前身）
      * [http://www.w3schools.com/jsref/jsref_obj_string.asp](屬性與方法)

    {:.small[data-lang=javascript]}
    ~~~
      var str = "侍中尚書、長史、參軍，此悉貞良死節之臣也";

      str[11] = "庛";
      document.write( str[11] + '<br>' );
      document.write( str.split("、") + '<br>');
      document.write( str.slice(11) + '<br>' );
    ~~~

  !SLIDE
    Functions
    ---

    建一個函數：
    `function 函式名 (引數們) { ... }`
    `var 函數名 = function (引數們) { ... }`

    呼叫一個函數：
    `函數名(要傳的引數)`

    {:.fragment}
    * 函數可以像變數一樣被丟來丟去。
    * 無法像 C 那樣指定引數預設值。
    * 呼叫時引數的個數，和函數定義的引數個數可以不一樣。

  !SLIDE
    Functions
    ---

    {:.small}
    ~~~
      // eachOf：
      // 將 array 裡的每個東西都丟進 func 當引數
      var eachOf = function(array, func){
        for(var i = 0; i < array.length; i+=1){
          func(array[i]);
        }
      }

      eachOf(["棋盤", "稿紙", "綠豆糕"], function(item){
        document.write('啊，好似' + item + '似的！');
      });
    ~~~

    Event handler / callback 很常用


  !SLIDE
    Objects
    ---
    `{name1: value1, name2: value2, ……}`

    * value 可以是函數
    * 函數裡 `this` 指自己這個物件
    * 可以隨時幫 object 增加成員

    {:.small}
    ~~~
      var person = {
        name: "董允",
        comment: "志慮忠純，是以先帝簡拔以遺陛下。",
        reward: function(){
          // this：
          document.write("臣" + this.name + "謝皇上賜賞。")
        }
      };

      // 增添「職位」
      person.position = "侍中";
      person.reward("田地");
      console.log('person:', person);
    ~~~

  !SLIDE
    Arrays
    ---
    `[元素1, ……, 元素N]`
    * 元素不一定要都同一種型態
    * length 為陣列長度
    * [http://www.w3schools.com/jsref/jsref_obj_array.asp](屬性與方法)

    {:.small[data-lang=javascript]}
    ~~~
      var arr = [3.14, "任意文字", {text: "物件"}, ["另一個", "陣列"]];
      for(var i=0; i<arr.length; i+=1){
        document.write( arr[i] + '<br>');
      }
      document.write('<hr>請打開 Javascript console');
      console.log( '陣列長度：' , arr.length);
      console.log( arr.pop());
      console.log( 'pop 後陣列：', arr);
    ~~~

  !SLIDE
    Just for reference
    ---

    Javascript 物件變數與陣列只存 reference。
    {:.small[data-lang=javascript]}
    ~~~
      document.write("請看 Javascript console");
      
      var obj = {name: "value"},
          obj2 = obj;
 
      // obj, obj2 reference 相同
      // obj 和新建的物件 reference 不同，即使值都一樣，
      // === operator 還是把它認作不同。
      console.log('obj === obj2 :',  obj === obj2);
      console.log('obj === {...} :', obj === {name: "value"});

      var num = 3.14,
          arr = [ "任意文字" ];

      // 蓋一個 function，把 arr、num 傳進去修改
      var alter = function(a, n){
        a[0] = "隨便文字"; n = 1.618;
      };
      alter(arr, num);

      // 看 arr, num 有沒有被修改
      console.log('arr:', arr, 'num:', num);
    ~~~

!ENDSTACK

{:.chapter}
!SLIDE
jQuery
------
替你操控 DOM (HTML 的 API)

!STACK
  !SLIDE
    開始用 jQuery
    ---

    神秘咒語
    ```
      <script type="text/javascript"
       src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js">
      </script>
    ```

    然後施魔法

    {:.small.html}
    ~~~
      <p></p>

      &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;
      &lt;script type="text/javascript"&gt;
        $('p').text('jQuery 好 Q!');
      &lt;/script&gt;
    ~~~

  !SLIDE
    大改造!! 劇的 Before After
    ---
    物件 5927：不方便的 API
    {:.demo-dom-native.small[data-lang=javascript]}
    ~~~
      // 偵測是否同意出師表
      var form = document.querySelector('#submitform');

      form.addEventListener('submit', function(e){
        if(!document.querySelector('#tos').checked){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      });

      // 增加推薦人
      document.querySelector('.add-referral')
              .addEventListener('click', function(){

        // 開一個 buffer，建立下面架構：
        /*
          <p>
            <input type="text" name="referral">
            <a class="del" href="javascript:;">刪除</a>
          </p>
        */
        var buffer = document.createDocumentFragment(),
            p      = buffer.appendChild(
                        document.createElement('p')),
            txt    = p.appendChild(
                        document.createElement('input')),
            del    = p.appendChild(
                        document.createElement('a'));

        txt.setAttribute('type', 'text');
        txt.setAttribute('name', 'referral');
        del.setAttribute('class', 'del');
        del.setAttribute('href', 'javascript:;');
        del.innerHTML = '刪除';

        // 把 buffer 內容塞進 DOM
        document.querySelector('#referrals')
                .appendChild(buffer);
      });

      // 刪除推薦人
      form.addEventListener('click', function(e){
        // 若 'click' 事件來自 <a class="del">
        if(e.target.className === 'del'){
          // 把包著 <a class="del"> 之 <p> 整個移除。
          var p = e.target.parentNode;
          p.parentNode.removeChild(p);
        }
      });
    ~~~

    DOM 這個 API 很長，相當困擾。

  !SLIDE
    匠：jQuery
    ---

    ### SPEC

    * 表單送出時，檢查是否接受出師表
    * 按「增加推薦人」時，蓋一個下面的東西：
      {:.small[style=width: 400px; margin: 0 auto 1em;]}
      ```
        <p>
          <input type="text" name="referral">
          <a class="del">刪除</a>
        </p>
      ```
    * 按裡頭的「刪除」時，把整個 `<p>` 移除。

    ### 希望
      寫少一點，作到的事情更多。

  !SLIDE
    BEFORE
    ---
    {:.demo-dom-native.small}
    ~~~
      var form = document.querySelector('#submitform');

      // 偵測是否同意出師表
      form.addEventListener('submit', function(e){
        if(!document.querySelector('#tos').checked){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      });

      // 增加推薦人
      document.querySelector('.add-referral')
              .addEventListener('click', function(){

        // 開一個 buffer，建立下面架構：
        var buffer = document.createDocumentFragment(),
            p      = buffer.appendChild(
                        document.createElement('p')),
            txt    = p.appendChild(
                        document.createElement('input')),
            del    = p.appendChild(
                        document.createElement('a'));

        txt.setAttribute('type', 'text');
        txt.setAttribute('name', 'referral');
        del.setAttribute('class', 'del');
        del.setAttribute('href', 'javascript:;');
        del.innerHTML = '刪除';

        // 把 buffer 內容塞進 DOM
        document.querySelector('#referrals')
                .appendChild(buffer);
      });

      // 刪除推薦人
      form.addEventListener('click', function(e){
        // 若 'click' 事件來自 <a class="del">
        if(e.target.className === 'del'){
          // 把包著 <a class="del"> 之 <p> 整個移除。
          var p = e.target.parentNode;
          p.parentNode.removeChild(p);
        }
      });
    ~~~

  !SLIDE
    AFTER
    ---

    <iframe width="150" height="40" style="position: absolute; right: 0; top: 0; opacity: 0.1;" src="http://www.youtube.com/embed/E9gfiTAhScM?rel=0" frameborder="0"></iframe>

    なんということでしょう!

    {:.demo-dom-jquery.small[data-lang=javascript]}
    ~~~
      $('#submitform').on('submit', function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      }).on('click', '.del', function(){
        // 刪除推薦人
        // 把包著 <a class="del"> 之 <p> 整個移除。
        $(this).parents('p').remove();
      });

      // 增加推薦人
      $('.add-referral').on('click', function(){
        // 把下面內容塞進 DOM
        $('<p><input type="text" name="referral"><a class="del">刪除</a></p>').appendTo('#referrals');
      });
    ~~~

!ENDSTACK

{:.chapter}
!SLIDE
  jQuery Object
  ---

!STACK
  !SLIDE
    神奇的 `$`
    ---

    {:[data-lang=javascript][style=width: 220px; margin: 0 auto 1em;]}
    ```
      $(SELECTOR)
    ```

    * `$` 是一個 function。
    * 傳入 [http://api.jquery.com/category/selectors/](css selector) → 回傳找到的 element
    * 傳入 HTML tag → 回傳新蓋的 element

    ---

    element 被包在 jQuery obejct 裡頭。

    {:[height=190]}![images/js/jqObj.png](obj)

  !SLIDE
    jQuery Object
    ---

    {:[width=900]}![images/js/jqObj.png](obj)

    * 看起來像陣列
    * 有 length 屬性
    * 有[http://api.jquery.com](很多 method) 可以用

!ENDSTACK

{:.chapter}
!SLIDE
  jQuery API
  ---

!STACK
  !SLIDE
    Manipulation
    ---
    操弄 DOM 結構與屬性

    * [http://api.jquery.com/category/css/](讀取 / 新增 class 或 CSS style)
    * [讀取 / 新增 / 移除屬性](http://api.jquery.com/category/attributes/)
    * 在 [http://api.jquery.com/category/manipulation/dom-insertion-inside/](裡面) [http://api.jquery.com/category/manipulation/dom-insertion-outside/](旁邊) 插入/移除 DOM element
    * [http://api.jquery.com/category/manipulation/dom-insertion-around/](包覆)目前 DOM element

    ---

    [http://api.jquery.com/category/manipulation/](Manipulation - jQuery API)

  !SLIDE
    Manipulation
    ---

    {:.html.small.maxheight}
    ~~~
      &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;
      
      <style type="text/css">
        p{
          border: 20px solid yellow;
          margin: 20px; padding: 20px;
        }
        .clearstyle{
          border: 0; margin: 0; font: 20px monospace;
        }
      </style>

      <p>我只是個 p。</p>

      &lt;script type="text/javascript" &gt;
        var old_p = $('p');

        // 複製原本的 <p>，加上 class
        var new_p = old_p.clone().addClass('clearstyle');

        // 設定新的 <p> 的內容
        new_p.html([
          'innerWidth: ', old_p.innerWidth(), '<br>',
          'outerWidth: ', old_p.outerWidth()
        ].join(''));

        // 設定 HTML element 屬性
        new_p.attr('title', '請拿左上角的尺');
        
        // 把新的 <p> 插入 DOM element
        old_p.after(new_p);
      &lt;/script&gt;
    ~~~

  !SLIDE
    Traversing
    ---
    從目前 element 找到另一個 element

    * [http://api.jquery.com/category/traversing/tree-traversal/](找親戚)
    * [http://api.jquery.com/category/traversing/filtering/](過濾)目前的 jQuery object

    {:.jquery.small}
    ~~~
      // TODO:
      // .each()
      // find()
      // parentts()
      //  all using conosole.log

      // not()
    ~~~

    ---

    [http://api.jquery.com/category/traversing/](Traversing - jQuery API)

  !SLIDE
    Events
    ---
    互動的主要要素

    {:.jquery.small}
    ~~~
      // on
      // this 通常會指定
    ~~~

    ---

    [http://api.jquery.com/category/events/](Events - jQuery API)

  !SLIDE
    Effects
    ---
    特效！

    ---

    [http://api.jquery.com/category/effects/](Effects - jQuery API)

!ENDSTACK

{:.chapter}
!STACK
  jQuery UI
  ---

[http://jqueryui.com/demos/](jQuery UI)

!STACK
  !SLIDE
    jQuery UI
    ---

    * [http://jqueryui.com/demos/sortable/](拖曳等等)的互動
    * [http://jqueryui.com/demos/dialog/](對話視窗)之類的 Widgets
    * 更多[http://jqueryui.com/demos/show/](特效)

  !ENDSLIDE
!ENDSTACK

{:.chapter}
!SLIDE
  console
  ---

!STACK
  !SLIDE
    console.log
    ---
    * 有三角形
    * 物件可能會變

    ~~~
      var arr = ['棋盤', '稿紙', '綠豆糕'];
      console.log('arr: ', arr);
      arr.shift(); // 移除第 0 個
      console.log('shift 之後：arr: ', arr);
    ~~~

  !SLIDE
    中斷點
    ---
    * 開發人員工具的「Scripts」 面板
    * 選擇要 debug 的檔案
    * 中斷時可用 console
    * "Pause on uncaught exception" 按鈕
    ![images/js/pausebutton.png](pause)

!ENDSTACK

!SLIDE
  THE END
  ===

  {:.nav}
  * [html.html](HTML)
  * [css.html](CSS)
  * [js.html](Javascript)
  * [advancedjs.html](Advanced JS)
